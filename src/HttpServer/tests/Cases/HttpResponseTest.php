<?php

declare(strict_types=1);
/**
 * This file is part of MineAdmin.
 *
 * @link     https://www.mineadmin.com
 * @document https://doc.mineadmin.com
 * @contact  root@imoi.cn
 * @license  https://github.com/mineadmin/MineAdmin/blob/master/LICENSE
 */

namespace Mine\HttpServer\Tests\Cases;

use Hyperf\Context\ApplicationContext;
use Hyperf\Context\ResponseContext;
use Hyperf\Contract\ConfigInterface;
use Hyperf\Contract\StdoutLoggerInterface;
use Hyperf\Framework\Event\BootApplication;
use Mine\HttpServer\Contract\Log\RequestIdGeneratorInterface;
use Mine\HttpServer\Listener\BootApplicationListener;
use Mine\HttpServer\Log\RequestIdGenerator;
use Mine\HttpServer\RequestIdHolder;
use Mine\HttpServer\Response;
use PHPUnit\Framework\TestCase;
use Psr\Log\LogLevel;

/**
 * @internal
 * @coversNothing
 */
class HttpResponseTest extends TestCase
{
    protected function setUp(): void
    {
        $mockConfig = \Mockery::mock(ConfigInterface::class);
        $mockConfig->allows('has')->andReturn(true);
        $mockConfig->allows('get')->andReturn([
            StdoutLoggerInterface::class => [
                LogLevel::DEBUG,
            ],
        ]);
        $mockConfig->allows('set')->andReturn(true);
        ApplicationContext::getContainer()
            ->set(ConfigInterface::class, $mockConfig);
        ApplicationContext::getContainer()->define(
            RequestIdGeneratorInterface::class,
            RequestIdGenerator::class
        );
        $listener = new BootApplicationListener();
        $listener->process(new BootApplication());
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testSuccess(): void
    {
        ResponseContext::set(new \Hyperf\HttpMessage\Base\Response());
        $response = new Response();
        $content = $response->success(message: 'xxx', data: ['xxx'], code: 201)->getBody()->getContents();
        $this->assertSame($content, '{"requestId":"' . RequestIdHolder::getId() . '","success":true,"message":"success","code":201,"data":["xxx"]}');
    }

    public function testError(): void
    {
        ResponseContext::set(new \Hyperf\HttpMessage\Base\Response());
        $response = new Response();
        $content = $response->error(message: 'xxx', code: 201, data: ['xxx'])->getBody()->getContents();
        $this->assertSame($content, '{"requestId":"' . RequestIdHolder::getId() . '","success":false,"code":201,"message":"fail","data":["xxx"]}');
    }
}
